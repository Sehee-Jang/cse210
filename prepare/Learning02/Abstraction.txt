Abstraction - Articulate
[Overview]
    Articulate the principle of abstraction.

[Instructions]
    Now that you have learned about the principle of abstraction, and designed and developed a program using it, return to Canvas and answer the following question (the way you would in a job interview):

What is abstraction and why is it important?

Your response must:
    Explain the meaning of Abstraction
        Abstracting refers to the stage of naming a class and determining only its role. It is an abstract expression of concrete objects. In object-oriented programming, classes are defined through abstraction, and instances are created and used.

    Highlight a benefit of Abstraction
        Since specific things are not decided, better object-oriented and structural programming can be performed later.
        When a common attribute method is extracted using an abstract class, duplication of code may be prevented, and maintenance may be facilitated.
    Provide an application of Abstraction
        You can start a car by turning the key or pressing the start button. You don't need to know how to engine is getting started, what all components your car has.
    Use a code example of Abstraction from the program you wrote
        public class Cars
        {
            public string _make;
            public string _model;
            public string _years;

            public void Display()
            {
                Console.WriteLine($"Start the {_years} {_make} {_model}.");
            }
        }

        class Program
            static void Main(string[] args)
            {
                Cars car1 = new Cars();
                car1._make = "Mercedes-Benz";
                car1._model = "G wagon";
                car1._years = "2018";
                car1.Display();
            }
    Thoroughly explain these concepts (this likely cannot be done in less than 100 words)

    [추상화] - 추상화는 클래스의 이름을 짓고 역할 정도만 정해두는 단계를 뜻함
    구체적인 사물을 추상적으로 표현하는 것이다. 객체 지향 프로그래밍에서는 추상화를 통해 클래스를 정의하고 인스턴스를 생성하여 사용한다.
    클래스 추상화는 클래스에서 공통된 속성과 메서드를 추출하여 추상 클래스를 만드는 것을 의미한다.
    추상 클래스는 객체를 만들 수 없고, 상속을 하는 역할로만 사용한다.
    추상 클래스에는 추상 메서드를 선언하는데 정의하지 않고 추상 메서드의 정의는 자식 클래스에서 진행한다.
    
    징점
        구체적인 것들을 정하지 않아 나중에 더욱 좋은 객체지향적이며 구조적인 프로그래밍을 할수 있다.
        추상 클래스를 사용하여 공통된 속성 메서드를 추출하면, 코드의 중복을 방지할 수 있으며, 유지보수가 용이해진다.
    